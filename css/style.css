/*Siempre es bueno definir una paleta de colores desde el principio*/

:root{
    --blanco: #ffffff;
    --oscuro: #212121;
    --primario: #ffc107;
    --secundario: #0097a7;
    --gris: #757575;
    --grisClaro: #dfe9f3

}


/*Hack para box model*/
html {
    font-size: 62.5%;
    box-sizing: border-box;
    
    /*scroll-snap-type: x mandatory;*/
}

@media (min-width: 480px) {
    html {
        
        scroll-snap-type: y mandatory; /*Efecto scroll snap*/
    }
}

/*Hack para box model*/
*, *:before, *:after {
    box-sizing: inherit;
  }  


body{
    font-size: 16px;
    font-family: 'Krub', sans-serif;
    background-image: linear-gradient(to top, var(--grisClaro) 0%, var(--blanco) 100%);
}

/*Fuentes seguras no son siempre las mejores en cuanto a diseño, Google fonts tiene fuentes gratis*/

/*Las modificaciones anteriores permiten que 1 rem = 10 px, pero se adaptan por sí solos a distintas resoluciones*/

/* 
rem es relativo al documento, em es relativo al objeto padre.
Se puede usar una calculadora px a rem.
*/

h1, h2, h3 {
    text-align: center;
}

h1 {
    font-size: 3.8rem;
}

h2 {
    font-size: 2.8rem;
}

h3 {
    font-size: 1.8;
}





.titulo span{
    font-size: 2rem;
}

.contenedor{
    max-width: 120rem; /* Si no hay ese espacio, toma el 100% en lugar de forzar el tamaño*/
    margin-top: 0rem; /*Sin margen hacia arriba*/
    margin-bottom: 0rem;
    margin-right: auto;
    margin-left: auto;
    /*Auto en su conjunto a la izquiera y derecha centra en el eje x este contenedor*/

    /*Puede tomar los 4 valores en margin:top right bottom left; o margin:top-bottom right-left*/

}

.boton {
    background-color: var(--secundario);
    color: var(--blanco);
    padding: 1rem 3rem;
    margin-top: 2rem;
    font-size: 2rem;
    text-decoration: none;
    text-transform: uppercase;
    font-weight: 700;
    border-radius: 0.5rem;
    width: 90%;
    text-align: center;
    border: none;
}
.boton:hover {
    background-color: var(--primario);
    color: var(--oscuro);
    cursor: pointer;
}

.boton:focus {
    background-color: var(--primario);
    color: var(--oscuro);
}

@media (min-width: 480px) {
    .boton {
        width: auto;
        margin-top: 3rem;
        margin-bottom: -1rem;
    }
}



.sombra {
    -webkit-box-shadow: 0px 5px 15px 0px rgba(105,104,105,0.84); /*Usada por Chromium*/
    -moz-box-shadow: 0px 5px 15px 0px rgba(105,104,105,0.84); /*Usada por Firefox*/
    box-shadow: 0px 5px 15px 0px rgba(105,104,105,0.84);

    background-color: var(--blanco);
    padding: 2rem;
    border-radius: 1rem;
}

.nav-bg{
    background-color: var(--secundario);
}

/*padding aleja el contenedor del resto*/
.navegacion-principal{
    display: flex;
    flex-direction: column; /*Por defecto*/
    /*align-items: center; Reemplazado por display:block text-align:center*/
    /*Propiedades space distribuyen el contenido*/
    
    scroll-snap-align: center;
    scroll-snap-stop: always;
}
/*
h1 span{
    font-size: 2rem;
    color: red;
} Así solo se aplican reglas a span en h1*/

/*No se recomienda usar los colores por nombre
Se prefiere el hexadecimal o rgb(), rgba(), o hsl()

Flexbox debe iniciarse desde el padre
*/
@media (min-width: 768px ) {
    .navegacion-principal{
        flex-direction: row;
        justify-content: space-between; /*Propiedades space distribuyen el contenido*/
    }
}

.navegacion-principal a {
    display: block;
    text-align: center;
    color: var(--blanco);
    text-decoration: none;
    font-size: 2rem;
    font-weight: 700;
    padding: 1rem; /*Se aplica de la orilla a dentro, hay que tener cuidado en dónde se coloca*/
}

.navegacion-principal a:hover{ /*Pseudoclase: Activado al pasar por encima*/
    background-color: var(--primario);
    color: var(--oscuro);
    
}

.navegacion-principal a:focus{
    background-color: var(--primario);
    color: var(--oscuro);
}

.hero {
    background-image: url(../img/hero.jpg);
    background-repeat: no-repeat;
    background-size: cover;
    height: 45rem;
    padding: 2rem;
    position: relative; /*Para que el hijo pueda tener posición absoluta*/
    margin-bottom: 2rem;
}

.contenido-hero {
    position: absolute;
    background-color: rgb(0,0,0,0.7);

    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 100%;

    /*Alinear Centrar verticalmente en columnas flex*/

    display: flex; 
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.contenido-hero h2,
.contenido-hero p {
    color: var(--blanco)
}

.contenido-hero .ubicacion {
    display: flex;
    align-items: flex-end;
}

/*Servicios*/
.servicios {
    display: grid;
    column-gap: 1rem;
    scroll-snap-align: center;
    scroll-snap-stop: always;


    /*grid-template-columns: 300px 300px; /*Define 2 cols de 300 px
    grid-template-rows: 200px 800px;*/

    /*grid: 200px 800px / 300px 800px*/

}

@media (min-width: 768px) {
    .servicios{
        grid-template-columns: repeat(3, 1fr);
    }
}


.servicio {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.servicio h3 {
    color: var(--secundario);
    font-weight: normal;
}

.servicio p{
    line-height: 1.7;
    text-align: center;
}

.servicio .iconos{
    height: 15rem;
    width: 15rem;
    background-color: var(--primario);
    border-radius: 50%;
    display: flex;
    justify-content: space-evenly;
    align-items: center;
}


/*Contacto*/

.formulario{
    background-color: var(--gris);
    width: min(60rem, 100%); /*Usa el valor más pequeño, te ahorra un Media Querie*/
    margin:  0 auto; /*Centra horizontalmente si su padre no es un flex, en este caso es display block*/
    padding: 2rem;
    border-radius: 1rem;


    scroll-snap-align: center;
    scroll-snap-stop: always;
}

.formulario fieldset {
    border: none;
    
}

.formulario legend{
    text-align: center;
    font-size: 1.8rem;
    text-transform: uppercase;
    font-weight: 700;
    margin-bottom: 2rem;
    color: var(--primario);
    width: 100%;
}

@media (min-width: 768px) {
    .contenedor-campos{
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: auto auto 20rem;
        column-gap: 1rem;
        }

        .campo:nth-child(3),
        .campo:nth-child(4)
        { /*Selecciona el número de hijo*/
            grid-column: 1 / 3;
        }

        
    
}

.campo{
    margin-bottom: 1rem;
}

.campo label{
    color: var(--blanco);
    font-weight: bold;
    margin-bottom: 0.5rem;
    display: block;
}

.campo textarea{
    height: 20rem;

}

.input-text{
    width: 100%; /*Que tome todo el espacio disponible*/
    border: none;
    padding: 1.5rem;
    border-radius: 1.5rem;
}


.footer{
    text-align: center;
}

/*utilidades*/
.w-100-sm{
    width: 100%;
}

@media (min-width: 768px) {
    .w-100-sm{
        width: auto;
    }
}

.alinear-derecha{
    justify-content: flex-end;
}

.flex{
    display: flex;
}



/*Sólo colocar lo que va a modificar el diseño según el tamaño de la pantalla

Es buena idea definir ciertas propiedades y redefinirlas justo después de cuanto son aplicadas, esto aumenta los media queries pero hace el código más legible.



@media (min-width: 480px ){ //De 480 a más
    body{
        background-color: blue;
    }
}

@media (min-width: 768px ){ //Para tablets
    body{
        background-color: goldenrod;
    }
}
/**/



